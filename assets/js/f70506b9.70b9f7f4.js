(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[803],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2965:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),l={sidebar_position:4},o={unversionedId:"query/functions",id:"query/functions",isDocsHomePage:!1,title:"Functions",description:"Dataview functions provide more advanced ways to manipulate data.",source:"@site/docs/query/functions.md",sourceDirName:"query",slug:"/query/functions",permalink:"/obsidian-dataview/docs/query/functions",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Sources",permalink:"/obsidian-dataview/docs/query/sources"},next:{title:"Examples",permalink:"/obsidian-dataview/docs/query/examples"}},s=[{value:"Function Vectorization",id:"function-vectorization",children:[]},{value:"Constructors",id:"constructors",children:[{value:"<code>object(key1, value1, ...)</code>",id:"objectkey1-value1-",children:[]},{value:"<code>list(value1, value2, ...)</code>",id:"listvalue1-value2-",children:[]},{value:"<code>date(string)</code>",id:"datestring",children:[]},{value:"<code>number(string)</code>",id:"numberstring",children:[]},{value:"<code>link(path)</code>",id:"linkpath",children:[]},{value:"<code>elink(url, [display])</code>",id:"elinkurl-display",children:[]}]},{value:"Objects, Arrays, and String Operations",id:"objects-arrays-and-string-operations",children:[{value:"<code>contains(object|list|string, value)</code>",id:"containsobjectliststring-value",children:[]},{value:"<code>extract(object, key1, key2, ...)</code>",id:"extractobject-key1-key2-",children:[]},{value:"<code>sort(list)</code>",id:"sortlist",children:[]},{value:"<code>reverse(list)</code>",id:"reverselist",children:[]},{value:"<code>length(object|array)</code>",id:"lengthobjectarray",children:[]},{value:"<code>sum(array)</code>",id:"sumarray",children:[]},{value:"<code>all(array)</code>",id:"allarray",children:[]},{value:"<code>any(array)</code>",id:"anyarray",children:[]},{value:"<code>none(array)</code>",id:"nonearray",children:[]}]},{value:"String Operations",id:"string-operations",children:[{value:"<code>regexmatch(pattern, string)</code>",id:"regexmatchpattern-string",children:[]},{value:"<code>regexreplace(string, pattern, replacement)</code>",id:"regexreplacestring-pattern-replacement",children:[]},{value:"<code>replace(string, pattern, replacement)</code>",id:"replacestring-pattern-replacement",children:[]},{value:"<code>lower(string)</code>",id:"lowerstring",children:[]},{value:"<code>upper(string)</code>",id:"upperstring",children:[]}]},{value:"Utility Functions",id:"utility-functions",children:[{value:"<code>default(field, value)</code>",id:"defaultfield-value",children:[]},{value:"<code>choice(bool, left, right)</code>",id:"choicebool-left-right",children:[]},{value:"<code>striptime(date)</code>",id:"striptimedate",children:[]}]}],c={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Dataview functions provide more advanced ways to manipulate data."),(0,i.kt)("h2",{id:"function-vectorization"},"Function Vectorization"),(0,i.kt)("p",null,"Most functions can be applied either to single values (like ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"date"),", etc.) OR to lists of those\nvalues. If a function is applied to a list, it also returns a list after the function is applied to each element\nin the list. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'lower("YES") = "yes"\nlower(list("YES", "NO")) = list("yes", "no")\n\nreplace("yes", "e", "a") = "yas"\nreplace(list("yes", "ree"), "e", "a") = list("yas", "raa")\n')),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("p",null,"Constructors which create values."),(0,i.kt)("h3",{id:"objectkey1-value1-"},(0,i.kt)("inlineCode",{parentName:"h3"},"object(key1, value1, ...)")),(0,i.kt)("p",null,"Creates a new object with the given keys and values. Keys and values should alternate in the call, and keys should\nalways be strings/text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'object() => empty object\nobject("a", 6) => object which maps "a" to 6\nobject("a", 4, "c", "yes") => object which maps a to 4, and c to "yes"\n')),(0,i.kt)("h3",{id:"listvalue1-value2-"},(0,i.kt)("inlineCode",{parentName:"h3"},"list(value1, value2, ...)")),(0,i.kt)("p",null,"Creates a new list with the given values in it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'list() => empty list\nlist(1, 2, 3) => list with 1, 2, and 3\nlist("a", "b", "c") => list with "a", "b", and "c"\n')),(0,i.kt)("h3",{id:"datestring"},(0,i.kt)("inlineCode",{parentName:"h3"},"date(string)")),(0,i.kt)("p",null,"Parses a date from the provided string argument, if possible, returning null otherwise."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'date("2020-04-18") = <date object representing April 18th, 2020>\n')),(0,i.kt)("h3",{id:"numberstring"},(0,i.kt)("inlineCode",{parentName:"h3"},"number(string)")),(0,i.kt)("p",null,"Pulls the first number out of the given string, returning it if possible. Returns null if there are no numbers in the\nstring."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'number("18 years") = 18\nnumber(34) = 34\nnumber("hmm") = null\n')),(0,i.kt)("h3",{id:"linkpath"},(0,i.kt)("inlineCode",{parentName:"h3"},"link(path)")),(0,i.kt)("p",null,"Construct a link object from the given file path or name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"link()\n")),(0,i.kt)("h3",{id:"elinkurl-display"},(0,i.kt)("inlineCode",{parentName:"h3"},"elink(url, [display])")),(0,i.kt)("p",null,"Construct a link to an external url (like ",(0,i.kt)("inlineCode",{parentName:"p"},"www.google.com"),"). If provided with two arguments, the second\nargument is the display name for the link."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'elink("www.google.com") => link element to google.com\nelink("www.google.com", "Google") => link element to google.com, displays as "Google"\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"objects-arrays-and-string-operations"},"Objects, Arrays, and String Operations"),(0,i.kt)("p",null,"Operations that manipulate values inside of container objects."),(0,i.kt)("h3",{id:"containsobjectliststring-value"},(0,i.kt)("inlineCode",{parentName:"h3"},"contains(object|list|string, value)")),(0,i.kt)("p",null,"Checks if the given container type has the given value in it. This function behave slightly differently based on whether\nthe first argument is an object, a list, or a string."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For objects, checks if the object has a key with the given name. For example,",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'contains(file, "ctime") = true\ncontains(file, "day") = true (if file has a date in its title, false otherwise)\n'))),(0,i.kt)("li",{parentName:"ul"},"For lists, checks if any of the array elements equals the given value. For example,",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"contains(list(1, 2, 3), 3) = true\ncontains(list(), 1) = false\n"))),(0,i.kt)("li",{parentName:"ul"},"For strings, checks if the given value is a substring (i.e., inside) the string.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'contains("hello", "lo") = true\ncontains("yes", "no") = false\n')))),(0,i.kt)("h3",{id:"extractobject-key1-key2-"},(0,i.kt)("inlineCode",{parentName:"h3"},"extract(object, key1, key2, ...)")),(0,i.kt)("p",null,"Pulls multiple fields out of an object, creating a new object with just those fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'extract(file, "ctime", "mtime") = object("ctime", file.ctime, "mtime", file.mtime)\nextract(object("test", 1)) = object()\n')),(0,i.kt)("h3",{id:"sortlist"},(0,i.kt)("inlineCode",{parentName:"h3"},"sort(list)")),(0,i.kt)("p",null,"Sorts a list, returning a new list in sorted order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'sort(list(3, 2, 1)) = list(1, 2, 3)\nsort(list("a", "b", "aa")) = list("a", "aa", "b")\n')),(0,i.kt)("h3",{id:"reverselist"},(0,i.kt)("inlineCode",{parentName:"h3"},"reverse(list)")),(0,i.kt)("p",null,"Reverses a list, returning a new list in reversed order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'reverse(list(1, 2, 3)) = list(3, 2, 1)\nreverse(list("a", "b", "c")) = list("c", "b", "a")\n')),(0,i.kt)("h3",{id:"lengthobjectarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"length(object|array)")),(0,i.kt)("p",null,"Returns the number of fields in an object, or the number of entries in an array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'length(list()) = 0\nlength(list(1, 2, 3)) = 3\nlength(object("hello", 1, "goodbye", 2)) = 2\n')),(0,i.kt)("h3",{id:"sumarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"sum(array)")),(0,i.kt)("p",null,"Sums all numeric values in the array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sum(list(1, 2, 3)) = 6\n")),(0,i.kt)("h3",{id:"allarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"all(array)")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," only if ALL values in the array are truthy. You can also pass multiple arguments to this function, in\nwhich case it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," only if all arguments are truthy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"all(list(1, 2, 3)) = true\nall(list(true, false)) = false\nall(true, false) = false\nall(true, true, true) = true\n")),(0,i.kt)("h3",{id:"anyarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"any(array)")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if ANY of the values in the array are truthy. You can also pass multiple arguments to this function, in\nwhich case it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if any of the arguments are truthy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"any(list(1, 2, 3)) = true\nany(list(true, false)) = true\nany(list(false, false, false)) = false\nall(true, false) = true\nall(false, false) = false\n")),(0,i.kt)("h3",{id:"nonearray"},(0,i.kt)("inlineCode",{parentName:"h3"},"none(array)")),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if NONE of the values in the array are truthy."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"string-operations"},"String Operations"),(0,i.kt)("h3",{id:"regexmatchpattern-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"regexmatch(pattern, string)")),(0,i.kt)("p",null,"Checks if the given string matches the given pattern (using the JavaScript regex engine)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'regexmatch("\\w+", "hello") = true\nregexmatch(".", "a") = true\nregexmatch("yes|no", "maybe") = false\n')),(0,i.kt)("h3",{id:"regexreplacestring-pattern-replacement"},(0,i.kt)("inlineCode",{parentName:"h3"},"regexreplace(string, pattern, replacement)")),(0,i.kt)("p",null,"Replaces all instances where the ",(0,i.kt)("em",{parentName:"p"},"regex")," ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern")," matches in ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", with ",(0,i.kt)("inlineCode",{parentName:"p"},"replacement"),". This uses the JavaScript\nreplace method under the hood, so you can use special characters like ",(0,i.kt)("inlineCode",{parentName:"p"},"$1")," to refer to the first capture group, and so on."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'regexreplace("yes", "[ys]", "a") = "aea"\nregexreplace("Suite 1000", "\\d+", "-") = "Suite -"\n')),(0,i.kt)("h3",{id:"replacestring-pattern-replacement"},(0,i.kt)("inlineCode",{parentName:"h3"},"replace(string, pattern, replacement)")),(0,i.kt)("p",null,"Replace all instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"replacement"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'replace("what", "wh", "h") = "hat"\nreplace("The big dog chased the big cat.", "big", "small") = "The small dog chased the small cat."\nreplace("test", "test", "no") = "no"\n')),(0,i.kt)("h3",{id:"lowerstring"},(0,i.kt)("inlineCode",{parentName:"h3"},"lower(string)")),(0,i.kt)("p",null,"Convert a string to all lower case."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'lower("Test") = "test"\nlower("TEST") = "test"\n')),(0,i.kt)("h3",{id:"upperstring"},(0,i.kt)("inlineCode",{parentName:"h3"},"upper(string)")),(0,i.kt)("p",null,"Convert a string to all upper case."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'upper("Test") = "TEST"\nupper("test") = "TEST"\n')),(0,i.kt)("h2",{id:"utility-functions"},"Utility Functions"),(0,i.kt)("h3",{id:"defaultfield-value"},(0,i.kt)("inlineCode",{parentName:"h3"},"default(field, value)")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," is null, return ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"; otherwise return ",(0,i.kt)("inlineCode",{parentName:"p"},"field"),". Useful for replacing null values with defaults. For example, to show projects which haven't been completed yet, use ",(0,i.kt)("inlineCode",{parentName:"p"},'"incomplete"')," as their defualt value: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'default(dateCompleted, "incomplete")\n')),(0,i.kt)("p",null,"Default is vectorized in both arguments; if you need to use default explicitly on a list argument, use ",(0,i.kt)("inlineCode",{parentName:"p"},"ldefault"),", which\nis the same as default but is not vectorized."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"default(list(1, 2, null), 3) = list(1, 2, 3)\nldefault(list(1, 2, null), 3) = list(1, 2, null)\n")),(0,i.kt)("h3",{id:"choicebool-left-right"},(0,i.kt)("inlineCode",{parentName:"h3"},"choice(bool, left, right)")),(0,i.kt)("p",null,"A primitive if statement - if the first argument is truthy, returns left; otherwise, returns right."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'choice(true, "yes", "no") = "yes"\nchoice(false, "yes", "no") = "no"\nchoice(x > 4, y, z) = y if x > 4, else z\n')),(0,i.kt)("h3",{id:"striptimedate"},(0,i.kt)("inlineCode",{parentName:"h3"},"striptime(date)")),(0,i.kt)("p",null,"Strip the time component of a date, leaving only the year, month, and day. Good for date comparisons if you don't care\nabout the time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"striptime(file.ctime) = file.cday\nstriptime(file.mtime) = file.mday\n")))}u.isMDXComponent=!0}}]);