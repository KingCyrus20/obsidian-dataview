(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[506],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return c},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(a),g=r,y=d["".concat(u,".").concat(g)]||d[g]||p[g]||i;return a?n.createElement(y,o(o({ref:t},c),{},{components:a})):n.createElement(y,o({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5113:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o={sidebar_position:3},l={unversionedId:"creating-queries",id:"creating-queries",isDocsHomePage:!1,title:"Creating Queries",description:"Once you've added useful data to relevant pages, you'll want to actually display it somewhere or operate on it. Dataview",source:"@site/docs/creating-queries.md",sourceDirName:".",slug:"/creating-queries",permalink:"/obsidian-dataview/docs/creating-queries",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Pages and Fields",permalink:"/obsidian-dataview/docs/where-data-comes-from"},next:{title:"Queries",permalink:"/obsidian-dataview/docs/query/queries"}},u=[{value:"Using the Query Language",id:"using-the-query-language",children:[]},{value:"Using Inline Queries",id:"using-inline-queries",children:[]},{value:"Using the JavaScript API",id:"using-the-javascript-api",children:[]}],s={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Once you've added useful data to relevant pages, you'll want to actually display it somewhere or operate on it. Dataview\nallows this through ",(0,i.kt)("inlineCode",{parentName:"p"},"dataview")," code blocks and inline queries, where you can write queries/code and have them be dynamically executed and\ndisplayed in the note preview. For writing such queries, you have three options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The dataview ",(0,i.kt)("a",{parentName:"li",href:"/docs/query/queries"},"query language")," is a simplistic, SQL-like language for quickly creating views. It\nsupports basic arithmetic and comparison operations, and is good for basic applications."),(0,i.kt)("li",{parentName:"ol"},"The query language also provides inline queries, which allow you to embed single values\ndirectly inside a page - for example, todays date via ",(0,i.kt)("inlineCode",{parentName:"li"},"= date(today)"),", or a field from another page via ",(0,i.kt)("inlineCode",{parentName:"li"},"= [[Page]].value"),"."),(0,i.kt)("li",{parentName:"ol"},"The dataview ",(0,i.kt)("a",{parentName:"li",href:"/docs/api/intro"},"JavaScript API")," gives you the full power of JavaScript and provides a DSL for pulling\nDataview data and executing queries, allowing you to create arbitrarily complex queries and views.")),(0,i.kt)("p",null,"The query language tends to lag in features compared to the JavaScript API, primarily since the JavaScript API lives\ncloser to the actual code; the counter-argument to this fact is that the query language is also more stable and is less\nlikely to break on major Dataview updates."),(0,i.kt)("h3",{id:"using-the-query-language"},"Using the Query Language"),(0,i.kt)("p",null,"You can create a query language dataview block in any note using the syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"```dataview\n... query ...\n```\n")),(0,i.kt)("p",null,"The details of how to write a query are explained in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/query/queries"},"query language documentation"),"; if you learn\nbetter by example, take a look at the ",(0,i.kt)("a",{parentName:"p",href:"/docs/query/examples"},"query examples"),"."),(0,i.kt)("h3",{id:"using-inline-queries"},"Using Inline Queries"),(0,i.kt)("p",null,"You can use an inline query via the syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`= <query language expression>`\n")),(0,i.kt)("p",null,"where the expression is written using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/query/expressions"},"query language expression language"),". You can\nconfigure inline queries to use a different prefix (like ",(0,i.kt)("inlineCode",{parentName:"p"},"dv:")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"~"),") in the Dataview settings."),(0,i.kt)("h3",{id:"using-the-javascript-api"},"Using the JavaScript API"),(0,i.kt)("p",null,"You can create a JS dataview block in any note using the syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"```dataviewjs\n... js code ...\n```\n")),(0,i.kt)("p",null,"Inside of a JS dataview block, you have access to the full dataview API via the ",(0,i.kt)("inlineCode",{parentName:"p"},"dv")," variable. For an explanation of\nwhat you can do with it, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/code-reference"},"API documentation"),", or the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/code-examples"},"API examples"),"."))}c.isMDXComponent=!0}}]);