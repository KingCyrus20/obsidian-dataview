(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[857],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1037:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={sidebar_position:2},l={unversionedId:"query/sources",id:"query/sources",isDocsHomePage:!1,title:"Sources",description:'A dataview "source" is something that identifies a set of files, tasks, or other data object. Sources are indexed internally by',source:"@site/docs/query/sources.md",sourceDirName:"query",slug:"/query/sources",permalink:"/obsidian-dataview/docs/query/sources",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Expressions",permalink:"/obsidian-dataview/docs/query/expressions"},next:{title:"Functions",permalink:"/obsidian-dataview/docs/query/functions"}},s=[],u={toc:s};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'A dataview "source" is something that identifies a set of files, tasks, or other data object. Sources are indexed internally by\nDataview, so they are fast to query. Dataview currently supports three source types:'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Tags"),": Sources of the form ",(0,i.kt)("inlineCode",{parentName:"li"},"#tag"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Folders"),": Sources of the form ",(0,i.kt)("inlineCode",{parentName:"li"},'"folder"'),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Links"),": You can either select links TO a file, or all links FROM a file. ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To obtain all pages which link TO ",(0,i.kt)("inlineCode",{parentName:"li"},"[[note]]"),", use ",(0,i.kt)("inlineCode",{parentName:"li"},"[[note]]"),". "),(0,i.kt)("li",{parentName:"ul"},"To obtain all pages which link FROM ",(0,i.kt)("inlineCode",{parentName:"li"},"[[note]]")," (i.e., all the links in that file), use ",(0,i.kt)("inlineCode",{parentName:"li"},"outgoing([[note]])"),".")),(0,i.kt)("p",null,"You can compose these filters in order to get more advanced sources using ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"or"),". "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, ",(0,i.kt)("inlineCode",{parentName:"li"},'#tag and "folder"')," will return all pages in ",(0,i.kt)("inlineCode",{parentName:"li"},"folder")," and with ",(0,i.kt)("inlineCode",{parentName:"li"},"#tag"),". "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[[Food]] or [[Exercise]]")," will give any pages which link to ",(0,i.kt)("inlineCode",{parentName:"li"},"[[Food]]")," OR ",(0,i.kt)("inlineCode",{parentName:"li"},"[[Exercise]]"),".")),(0,i.kt)("p",null,"Sources are used in both the ",(0,i.kt)("a",{parentName:"p",href:"/docs/query/queries#from"},"FROM query statement"),", as well as various JavaScript API query calls."))}c.isMDXComponent=!0}}]);